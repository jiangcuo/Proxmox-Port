diff --git a/www/manager6/qemu/HardwareView.js b/www/manager6/qemu/HardwareView.js
index 2453fcf4..1d6a46fd 100644
--- a/www/manager6/qemu/HardwareView.js
+++ b/www/manager6/qemu/HardwareView.js
@@ -165,11 +165,6 @@ Ext.define('PVE.qemu.HardwareView', {
 		group: 6,
 		defaultValue: '',
 		renderer: function(value, metaData, record, rowIndex, colIndex, store, pending) {
-		    let ostype = me.getObjectValue('ostype', undefined, pending);
-		    if (PVE.Utils.is_windows(ostype) &&
-			(!value || value === 'pc' || value === 'q35')) {
-			return value === 'q35' ? 'pc-q35-5.1' : 'virt';
-		    }
 		    return PVE.Utils.render_qemu_machine(value);
 		},
 	    },
diff --git a/www/manager6/qemu/MachineEdit.js b/www/manager6/qemu/MachineEdit.js
index f8b3cb6a..d54ad01a 100644
--- a/www/manager6/qemu/MachineEdit.js
+++ b/www/manager6/qemu/MachineEdit.js
@@ -9,6 +9,8 @@ Ext.define('PVE.qemu.MachineInputPanel', {
 	},
 	formulas: {
 	    q35: get => get('type') === 'q35',
+		pc: get => get('type') === 'pc',
+		virt: get => get('type') === 'virt',
 	},
     },
 
@@ -23,24 +25,16 @@ Ext.define('PVE.qemu.MachineInputPanel', {
 	    let me = this;
 	    let version = me.lookup('version');
 	    let store = version.getStore();
-	    let oldRec = store.findRecord('id', version.getValue(), 0, false, false, true);
-	    let type = value === 'q35' ? 'q35' : 'default';
-	    store.clearFilter();
-	    store.addFilter(val => val.data.id === 'latest' || val.data.type === type);
-	    if (!me.getView().isWindows) {
-		version.setValue('latest');
-	    } else {
-		store.isWindows = true;
-		if (!oldRec) {
-		    return;
+		if (value === 'pc'){
+		    value = 'i440fx';
 		}
-		let oldVers = oldRec.data.version;
-		// we already filtered by correct type, so just check version property
-		let rec = store.findRecord('version', oldVers, 0, false, false, true);
-		if (rec) {
-		    version.select(rec);
+		store.clearFilter();
+		console.log('value is '+ value)
+		if (value === null || value === '__default__') {
+			store.addFilter(val => val.data.id === 'latest');
+		}else{
+			store.addFilter(val => val.data.id === 'latest' || val.data.type === value);
 		}
-	    }
 	},
     },
 
@@ -68,28 +62,15 @@ Ext.define('PVE.qemu.MachineInputPanel', {
 	let machineConf = PVE.Parser.parsePropertyString(values.machine, 'type');
 	values.machine = machineConf.type;
 
-	me.isWindows = values.isWindows;
-	if (values.machine === 'pc') {
-	    values.machine = '__default__';
-	}
-
-	if (me.isWindows) {
-	    if (values.machine === '__default__') {
-		values.version = 'virt';
-	    } else if (values.machine === 'q35') {
-		values.version = 'pc-q35-5.1';
-	    }
-	}
-
 	values.viommu = machineConf.viommu || '__default__';
 
-	if (values.machine !== '__default__' && values.machine !== 'q35') {
-	    values.version = values.machine;
-	    values.machine = values.version.match(/q35/) ? 'q35' : '__default__';
+	// if (values.machine !== '__default__' && values.machine !== 'q35') {
+	//     values.version = values.machine;
+	//     values.machine = values.version.match(/q35/) ? 'q35' : '__default__';
 
-	    // avoid hiding a pinned version
-	    me.setAdvancedVisible(true);
-	}
+	//     // avoid hiding a pinned version
+	//     me.setAdvancedVisible(true);
+	// }
 
 	this.callParent(arguments);
     },
@@ -131,9 +112,9 @@ Ext.define('PVE.qemu.MachineInputPanel', {
 		},
 		listeners: {
 		    load: function(records) {
-			if (!this.isWindows) {
+			
 			    this.insert(0, { id: 'latest', type: 'any', version: gettext('Latest') });
-			}
+			
 		    },
 		},
 	    },
